/*
 * Tinkers Construct
 * Master build file
 * 
 * Authors: boni, Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'io.freefair.lombok' version '8.6'
}
//apply plugin: 'maven'

//import net.minecraftforge.gradle.common.task.SignJar

repositories {
    mavenCentral()
    maven { // Mantle
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // CraftTweaker, Immersive Engineering, JEI
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
    maven { // JSON Things
        name 'Dogforce Games'
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
     flatDir {
         dir '../Mantle/build/libs'
     }
}

group = 'slimeknights.tconstruct'
base {
    archivesName = 'TinkersConstruct'
}                                                          
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${minecraft_version}-${artifact_version}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}, Version: ${version}"

sourceSets {
    main {
        resources {
            srcDirs "src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
            // exclude debug resources, they are for helping us make the mod, not for the actual mod
            exclude 'assets/tconstruct/debug'
        }
    }
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    // enableIdeaPrepareRuns = true
    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            // IE uses mixins, remap their mixins to work in dev
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tconstruct {
                    source sourceSets.main
                }
            }
        }
    
        client {
            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }

        server {
            args '--nogui'
        }

        data {
            args '--mod', 'tconstruct', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'mantle'
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version

    // would ideally use API for this, but that does not work well with fg.deobf in my understanding
    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-${minecraft_base_version}:${minecraft_base_version}-${probe_version}")

    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${minecraft_version}-${ie_version}")
    runtimeOnly fg.deobf("curse.maven:MoonlightLib-499980:6000197")
    runtimeOnly fg.deobf("curse.maven:MmmMmmMmmMmm-225738:5737040")

    compileOnly fg.deobf("curse.maven:diet-443570:4813904")

    compileOnly fg.deobf("dev.gigaherz.jsonthings:JsonThings-${minecraft_version}:${json_things_version}")

    compileOnly fg.deobf("curse.maven:balm-531761:5999476")
    compileOnly fg.deobf("curse.maven:crafting-tweaks-233071:5623639")

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-inline:4.2.0'
    testImplementation 'org.assertj:assertj-core:3.21.0'
}

test {
    useJUnitPlatform()
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        'version': artifact_version,
        'loader_range': loader_range,
        'minecraft_range': minecraft_range,
        'forge_range': forge_range,
        'mantle_range': mantle_range,
        'jei_range': jei_range,
        'json_things_range': json_things_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "Tinkers Construct",
                "Specification-Vendor"    : "Slime Knights",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Slime Knights",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

sourcesJar {
    exclude 'assets/**'
    exclude 'data/**'
    exclude 'pack.png'
    exclude 'pack.mcmeta'
    exclude 'META-INF/mods.toml'
}

artifacts {
    archives sourcesJar
}

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore location
    ext.keystore_location = "."

if (!project.hasProperty("keystore_user_alias")) // keystore user alias
    ext.keystore_user_alias = ""
if (!project.hasProperty("sftp_username"))
    ext.sftp_username = ""
if (!project.hasProperty("sftp_key"))
    ext.sftp_key = ""
if (!project.hasProperty("keystore_user_password")) // keystore user pass
    ext.keystore_user_password = ""
if (System.getenv().KSK_PW != null)
    ext.keystore_user_password = System.getenv().KSK_PW


task("uploadJars", dependsOn: "build") {

    description = "uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                if (project.hasProperty("local_maven")) {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                    }
                }
                if (project.hasProperty("sftp_maven")) {
                    repositories.mavenDeployer {
                        configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}") {
                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
                        }
                    }
                }
            }
        }
    }
}

// task signUniversal(type: SignJar, dependsOn: 'jar') {
//     onlyIf {
//         project.hasProperty('jarsigner')
//     }
// 
//     def jarsigner = [:]
// 
//     if (project.hasProperty('jarsigner'))
//         jarsigner = project.jarsigner
// 
//     alias = 'tcon'
//     storePass = jarsigner.storepass
//     keyPass = jarsigner.keypass
//     keyStore = jarsigner.keystore
//     inputFile = jar.archivePath
//     outputFile = jar.archivePath
// }
// uploadArchives.dependsOn signUniversal
// build.dependsOn signUniversal

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
